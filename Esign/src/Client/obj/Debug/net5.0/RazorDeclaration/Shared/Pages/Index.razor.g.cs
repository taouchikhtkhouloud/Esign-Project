// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Esign.Client.Shared.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Blazored.FluentValidation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Identity.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Identity.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Identity.Roles;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Identity.RoleClaims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Identity.Users;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Preferences;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Interceptors;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Catalog.Product;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Catalog.Brand;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Dashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Communication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Audit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Misc.Document;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Managers.Misc.DocumentType;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Shared.Constants.Permission;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Shared.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Shared.Dialogs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Settings;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Application.Requests.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Pages.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Infrastructure.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
using Esign.Client.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\Shared\Pages\Index.razor"
using Syncfusion.Blazor.FileManager;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\Shared\Pages\Index.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\Shared\Pages\Index.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\Shared\Pages\Index.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\_Imports.razor"
[Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 156 "C:\Users\KHOULOUD TAOUCHIKHT\Desktop\Files\Coding\WarehouseManger\Esign\src\Client\Shared\Pages\Index.razor"
       

    private SfFileManager _fileManager;
    private SfTreeView<OptionsDataModel> _treeObj;
    private SfSidebar _sidebar;
    private SfDialog _dialog;
    private bool ShowThumbnail = true;
    private bool _isThumbNailChange = false;
    private string[] _selectedTreeItem = new string[] { "1" };
    private int _dialogCount = 0;
    private string _popupVisibility = "e-hide-popup";
    private string _fileOverlayDisplay = "e-file-hide-overlay";
    private string _storageRatio = "70%";
    private string _storageValue = "70% storage used";
    private string SelectedFilename { get; set; }
    private string SelectedPath { get; set; }
    private string FileManagerId { get; set; }
    private string MenuTargetData { get; set; }
    private string MenuTargetId { get; set; }
    private bool _isUnSupported = false;
    private string OverlayStyle { get; set; } = "overlayShow";
    private string _fileName = "";
    private int _mapId = 0;
    private int starid = 1;
    private List<OptionsDataModel> _optionsData = new List<OptionsDataModel>() {
        new OptionsDataModel(){Name= "All Files", Id= "1", Select= true, Icon= "sf-icon-Allfiles"},
        new OptionsDataModel(){Name= "Recent Files", Id= "2", Select= false, Icon= "sf-icon-RecentFiles" },
        //new OptionsDataModel(){Name= "Shared With Me", Select= false, Id= "3", Icon= "e-icons e-shared" },
        new OptionsDataModel(){Name= "Starred", Select= false, Id= "4", Icon= "sf-icon-Starred" },
        new OptionsDataModel(){Name= "Trash", Select= false, Id= "5", Icon= "sf-icon-Delete" },
        new OptionsDataModel(){Name= "About", Select= false, Id= "6", Icon= "sf-icon-About" }
    };
    private class OptionsDataModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public bool Select { get; set; }
        public string Icon { get; set; }
    }
    private string Field { get; set; } = null;
    private string Path { get; set; }
    private string[] SelectedItems { get; set; }
    private bool _treeSelectFlag = false;
    private string _treeNode = "1";
    private string[] _toolItems = new string[] { "Upload", "Delete", "Download", "Rename", "SortBy", "Refresh", "Selection", "View", "Details" };
    private string[] _fileMenu = new string[] { "Open", "|", "Delete", "Download", "Star", "Rename", "|", "Details" };
    private string[] _folderMenu = new string[] { "Open", "|", "Delete", "Download", "Rename", "|", "Details" };
    private string[] _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "NewFolder", "Upload", "|", "Details", "SelectAll" };

    protected override void OnInitialized()
    {
        _fileOverlayDisplay = "e-file-show-overlay";
        Path = "/";
        SelectedItems = new string[] { };
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("path", out var pathparam))
        {
            string tempPath = pathparam.First();
            if (tempPath.StartsWith("Files"))
            {
                tempPath = tempPath.Replace("Files", "");
            }
            else
            {
                //if (tempPath.StartsWith("SharedFiles"))
                //{
                //    tempPath = tempPath.Replace("SharedFiles", "");
                //}
            }
            SelectedPath = tempPath;
            Path = SelectedPath;
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("preview", out var param))
        {
            SelectedFilename = param.First();
            SelectedItems = new string[] { SelectedFilename };
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        OverlayStyle = "overlayHide";
        if (!firstRender)
        {
            if (_fileManager.IsRendered && SelectedPath != null & SelectedFilename != null)
            {
                SelectedPath = SelectedFilename = null;
                _fileOverlayDisplay = "e-file-hide-overlay";
            }
        }
    }
    private void DlgButtonClick()
    {
        _isUnSupported = false;
    }
    private void DlgClose(Object args)
    {
        _isUnSupported = false;
    }
    public void Refresh()
    {
        _fileManager.Refresh();
    }
    private void TreeSelect(NodeSelectEventArgs args)
    {
        _fileManager.ClearSelection();
        //To avoid file resfreshing if the selection change invloves shared Trash as showThumbNail change triggers which refreshFiles.
        _isThumbNailChange = (_treeNode == "5") || (args.NodeData.Id == "5");
        ShowThumbnail = args.NodeData.Id != "5";
        //To avoid manual resfreshing if the selection change invloves shared files/Trash as ajax setting change triggered which refresh.
        bool flag = (_treeNode == "3") || (_treeNode == "5") || (args.NodeData.Id == "3") || (args.NodeData.Id == "5");
        _selectedTreeItem[0] = _treeNode = args.NodeData.Id;
        if (_treeSelectFlag) { _treeSelectFlag = false; return; }
        switch (_treeNode)
        {
            //Recent Files
            case "2":
                _toolItems = new string[] { "Download", "Rename", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Delete", "Download", "Star", "Rename", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Delete", "Download", "Rename", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "NewFolder", "Upload", "|", "Details", "SelectAll" };
                Field = "Recent";
                break;
            //Shared With Me
            case "3":
                _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "|", "View", "|", "Refresh", "|", "Details", "|", "SelectAll" };
                Field = "Shared";
                break;
            //Starred
            case "4":
                _toolItems = new string[] { "Delete", "Download", "Rename", "SortBy", "Refresh", "Selection", "View" };
                _fileMenu = new string[] { "Open", "|", "Delete", "Download", "Star", "Rename", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Delete", "Download", "Rename", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "NewFolder", "Upload", "|", "SelectAll" };
                Field = "Starred";
                break;
            //Trash
            case "5":
                _toolItems = new string[] { "Delete", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Delete", "|", "Details", "|", "Restore", "EmptyTrash", "|", "SelectAll" };
                _folderMenu = new string[] { "Download", "|", "Details", "|", "Restore", "EmptyTrash", "|", "SelectAll" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "Details", "SelectAll", "|", "Restore", "EmptyTrash" };
                Field = "Trash";
                break;
            //About page
            case "6":
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "about");
                break;
            //All Files
            default:
                _toolItems = new string[] { "Upload", "Delete", "Download", "Rename", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Delete", "Download", "Star", "Rename", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Delete", "Download", "Rename", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "NewFolder", "Upload", "|", "Details", "SelectAll" };
                Field = "AllFiles";
                break;
        }
        if (!flag)
        {
            //Reset the path to make the filter work from route path
            Path = "/";
            _fileManager.RefreshFiles();
        }
    }
    private void BeforeSend(BeforeSendEventArgs args)
    {
        if (_isThumbNailChange) { _isThumbNailChange = false; args.Cancel = true; return; }
        if (args.Action != "Upload")
        {
            string AjaxSettingsString = JsonConvert.SerializeObject(args.AjaxSettings);
            Dictionary<string, dynamic> AjaxSettings = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(AjaxSettingsString);
            string dataString = AjaxSettings["data"];
            Dictionary<string, dynamic> data = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
            data.Add("RootType", Field);
            string modifiedDataString = JsonConvert.SerializeObject(data);
            AjaxSettings["data"] = modifiedDataString;
            string returnString = JsonConvert.SerializeObject(AjaxSettings);
            args.AjaxSettings = JsonConvert.DeserializeObject<object>(returnString);
        }
    }
    private void HamburgerClick()
    {
        _sidebar.Toggle();
    }
    private void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "User":
                _popupVisibility = _popupVisibility == "e-hide-popup" ? "e-show-popup" : "e-hide-popup";
                break;
            case "GitHub":
                NavigationManager.NavigateTo("https://github.com/syncfusion/blazor-showcase-document-explorer");
                break;
        }
    }
    private void NewClick()
    {
        _fileManager.CreateFolder();
    }
    private void SidebarOpen()
    {
        _popupVisibility = "e-hide-popup";
        _fileOverlayDisplay = "e-file-show-overlay";
    }
    private void SidebarClose()
    {
        _popupVisibility = "e-hide-popup";
        _fileOverlayDisplay = "e-file-hide-overlay";
    }
    private void PopupBefore(BeforePopupOpenCloseEventArgs args)
    {
        _dialogCount++;
        _popupVisibility = "e-hide-popup";
    }
    private async void PopupOpened(PopupOpenCloseEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("setDialogDrag", args.Element.ID);
    }
    private void PopupClosed()
    {
        _dialogCount--;
    }
    private async void MenuOpen(MenuOpenEventArgs args)
    {

        if ((Field != "Shared") && (Field != "Trash"))
        {
            if (args.IsSubMenu && (args.MenuType == "Layout")) { return; }
            foreach (MenuItemModel menu in args.Items)
            {
                if (menu.Text == "Star")
                {
                    menu.IconCss = "sf-icon-Starred";
                }
            }
            MenuTargetId = _mapId.ToString(); _mapId++;
            await args.Target.SetAttribute<string>("data-mapId", MenuTargetId);
            MenuTargetData = JsonConvert.SerializeObject(args.FileDetails);
        }
        else if (Field == "Trash" && !args.IsSubMenu)
        {
            foreach (MenuItemModel menu in args.Items)
            {
                switch (menu.Text)
                {
                    case "Restore":
                        menu.IconCss = "e-icons e-restore";
                        break;
                    case "EmptyTrash":
                        menu.IconCss = "sf-icon-Delete";
                        menu.Text = "Delete Permanently";
                        break;
                }
            }
        }
    }
    private async void MenuClick(MenuClickEventArgs args)
    {
        if (args.Item.Id == _fileManager.ID + "_cm_star")
        {
            Dictionary<string, dynamic>[] fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>[]>(MenuTargetData);
            bool isGrid = (_fileManager.View == ViewType.Details);
            string toggle = await JSRuntime.InvokeAsync<string>("toggleStar", MenuTargetId, isGrid);
            if (toggle == "Add")
            {
                ToggleStarred(fileDetails[0]["filterPath"] + fileDetails[0]["name"], true);
            }
            else if (toggle == "Remove")
            {
                ToggleStarred(fileDetails[0]["filterPath"] + fileDetails[0]["name"], false);
                if (this.Field == "Starred")
                {
                    await _fileManager.ClearSelection();
                    await _fileManager.RefreshFiles();
                }
            }
        }
        if (args.Item.Id == _fileManager.ID + "_cm_restore")
        {
            List<object> files = await _fileManager.GetSelectedFiles();
            if (files.Count != 0) { Restore(args.FileDetails); }
        }
        if (args.Item.Id == _fileManager.ID + "_cm_restoreall")
        {
            EmptyTrash();
        }
    }
    private void ToolbarCreate(ToolbarCreateEventArgs args)
    {
        List<Syncfusion.Blazor.FileManager.ItemModel> items = args.Items;
        foreach (Syncfusion.Blazor.FileManager.ItemModel item in items)
        {
            if (item.Id == _fileManager.ID + "_tb_newfolder") { item.CssClass = "e-FM-newfolder"; }
            if (item.Id == _fileManager.ID + "_tb_upload") { item.CssClass = "e-FM-upload"; }
        }
    }
    private void FileOpen(FileOpenEventArgs args)
    {
        if (Field == "Trash") { args.Cancel = true; return; }
        string dataString = JsonConvert.SerializeObject(args.FileDetails);
        Dictionary<string, dynamic> fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
        if (fileDetails["isFile"])
        {
            string filePath = (Field == "Shared" ? "SharedFiles" : "Files") + (fileDetails["filterPath"]);
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", fileDetails["name"] }, { "path", filePath } };
            string uri = NavigationManager.BaseUri;
            switch (fileDetails["type"])
            {
                case Constants.Zip:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "zip-viewer/", query));
                    break;
                case Constants.Pptx:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "presentation-viewer/", query));
                    break;
                case Constants.Pdf:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "pdf-viewer/", query));
                    break;
                case Constants.Docx:
                case Constants.Doc:
                case Constants.Rtf:
                case Constants.Txt:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "word-viewer/", query));
                    break;
                case Constants.Dib:
                case Constants.Jpg:
                case Constants.Jpeg:
                case Constants.Jpe:
                case Constants.Jfif:
                case Constants.Gif:
                case Constants.Tif:
                case Constants.Tiff:
                case Constants.Png:
                case Constants.Ico:
                    break;
                default:
                    _fileName = fileDetails["name"];
                    _isUnSupported = true;
                    break;
            }
        }
        else
        {
            if ((_treeNode != "1") && (_treeNode != "3"))
            {
                _treeSelectFlag = true;
                _selectedTreeItem = new string[] { "1" };
                _treeObj.DataBind();
                args.Cancel = true;
                string newPath = (fileDetails["filterPath"] + fileDetails["name"] + "/");
                Path = newPath.Replace('\\', '/');
                _fileManager.RefreshFiles();
            }
        }
    }
    private async void FileLoad(FileLoadEventArgs args)
    {
        string dataString = JsonConvert.SerializeObject(args.FileDetails);
        Dictionary<string, dynamic> fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
        //Check the module name and type of the file to set Preview
        if (args.Module == "LargeIconsView" && (Field != "Trash") && (fileDetails["type"] == Constants.Pptx || fileDetails["type"] == Constants.Docx
    || fileDetails["type"] == Constants.Doc || fileDetails["type"] == Constants.Rtf || fileDetails["type"] == Constants.Txt || fileDetails["type"] == Constants.Pdf))
        {
            string url = GetImageUrl(fileDetails);
            DOM ele = args.Element;
            string val = Convert.ToString((await ele.GetAttribute<string>("data-uid")));
            await ele.AddClass(new string[] { "e-file-preview-image" });
            await JSRuntime.InvokeVoidAsync("setSpinnerPreview", val);
            string anm = fileDetails["name"];
            string previewImage = await JSRuntime.InvokeAsync<string>("getLocalCacheImage", anm);
            if (previewImage != null)
            {
                await JSRuntime.InvokeVoidAsync("setPreview", val, previewImage);
            } else {
                HttpRequestMessage docrequest = new HttpRequestMessage(HttpMethod.Post, NavigationManager.BaseUri + "api/Preview/GetPreview");
                docrequest.Content = new StringContent(JsonConvert.SerializeObject(new { Path = (fileDetails["filterPath"] + fileDetails["name"]) }), Encoding.UTF8, "application/json");
                HttpResponseMessage docresponse = await Http.SendAsync(docrequest);
                if (docresponse.IsSuccessStatusCode)
                {
                    string output = await docresponse.Content.ReadAsStringAsync();
                    if (output != "Error")
                    {
                        string name = fileDetails["name"];
                        await JSRuntime.InvokeVoidAsync("setLocalCacheImage", name, output);
                        await JSRuntime.InvokeVoidAsync("setPreview", val, output);
                    }
                    else
                    {
                        //revertToIconPreview
                        var iconCss = "";
                        switch (fileDetails["type"])
                        {
                            case Constants.Docx:
                                iconCss = "e-fe-docx";
                                break;
                            case Constants.Doc:
                                iconCss = "e-fe-doc";
                                break;
                            case Constants.Rtf:
                                iconCss = "e-fe-rtf";
                                break;
                            case Constants.Pdf:
                                iconCss = "e-fe-pdf";
                                break;
                            case Constants.Pptx:
                                iconCss = "e-fe-pptx";
                                break;
                        }
                        await JSRuntime.InvokeVoidAsync("revertToIconPreview", val, iconCss);
                    }
                }
            }
        }
        // Adding Star
        if ((args.Module == "LargeIconsView" || args.Module == "DetailsView") && (Field != "Shared") && (Field != "Trash") && (fileDetails["starred"]))
        {

            DOM ele = args.Element;
            string val = starid.ToString();
            starid++;
            await ele.AddClass(new string[] { "e-file-star" });
            await ele.SetAttribute<string>("data-starid", val);
            bool isGrid = args.Module == "DetailsView";
            await JSRuntime.InvokeVoidAsync("showStar", val, isGrid);

        }
    }
    private async void ToggleStarred(string filePath, bool isStarred)
    {
        string url = NavigationManager.BaseUri + "api/FileManager/ToggleStarred";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        request.Content = new StringContent(JsonConvert.SerializeObject(new { Path = filePath, Starred = isStarred }), Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.SendAsync(request);
        string output = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode) { }
    }
    private async void Restore(object files)
    {
        string url = NavigationManager.BaseUri + "api/Trash/Restore";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        request.Content = new StringContent(JsonConvert.SerializeObject(files), Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await _fileManager.ClearSelection();
            await _fileManager.RefreshFiles();
        }
    }
    private async void EmptyTrash()
    {
        string url = NavigationManager.BaseUri + "api/Trash/EmptyTrash";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await _fileManager.ClearSelection();
            await _fileManager.RefreshFiles();
        }
    }
    private string GetImageUrl(Dictionary<string, dynamic> data)
    {
        //Specify your controller action name
        string baseUrl = "/api/FileManager/GetPreviewImage";
        string imgUrl = baseUrl + "?path=" + data["filterPath"] + data["name"];
        return imgUrl;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService _localStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserManager _userManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ClientPreferenceManager _clientPreferenceManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpInterceptorManager _interceptor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient _httpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDialogService _dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar _snackBar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAuthorizationService _authorizationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazorHeroStateProvider _stateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountManager _accountManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAuthenticationManager _authenticationManager { get; set; }
    }
}
#pragma warning restore 1591
